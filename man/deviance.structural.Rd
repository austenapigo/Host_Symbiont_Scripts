% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/specificity_scripts.R
\name{deviance.structural}
\alias{deviance.structural}
\title{Deviance in Structural Specificity to Null Models}
\usage{
\method{deviance}{structural}(
  x,
  randomized = null.structural.object,
  abundance.weighted = TRUE,
  trim = TRUE,
  notify = TRUE
)
}
\arguments{
\item{x}{Data frame of hosts populating rows and symbionts populating columns.}

\item{randomized}{Data frame. Output from null.structural function.}

\item{abundance.weighted}{Logical. TRUE calculates Shannon's H per symbiont. FALSE calculates host richness per symbiont.}

\item{trim}{Logical. TRUE removes symbionts that occupy one host sample. FALSE keeps all symbionts.}

\item{notify}{Logical. TRUE prints the current iteration of the for loop.}
}
\value{
A list. First element in the list is a data frame with columns that refer to the host sample identifiers, mean deviance in 
structural specificity, standard error of structural specificities, number of symbionts per host sample and average symbiont read abundance. 
All subsequent elements of the list are plots of uncorrected host specificity as a function of log symbiont read abundance with the null mode
in blue relative to the symbionts host specificities in red.
}
\description{
Calculate the deviance in observed structural specificity to a null model of structural specificity per symbiont. 
Deviance calculations are measured per symbiont and averaged per host sample. For example, all symbionts within a given host 
are evaluated for their host specificity across the entire host community. The host specificities of each symbiont are averaged
to calculate the mean host specificity for symbionts within a given host.
}
\examples{
# Calculate mean deviance per symbiont per host sample and visualize null vs. observed host specifities 
structural.dev <- deviance.structural(quad.rarefied, randomized = null.structural.object, abundance.weighted = TRUE, trim = TRUE, notify = TRUE)
structural.dev[[1]] # View data frame of output 
structural.dev[[2]] # View first graph 
structural.dev[[81]] # View last graph 
}
